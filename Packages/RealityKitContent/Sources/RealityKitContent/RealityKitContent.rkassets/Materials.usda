#usda 1.0
(
    customLayerData = {
        string creator = "Reality Composer Pro Version 1.0 (409.100.15)"
    }
    defaultPrim = "Root"
    metersPerUnit = 1
    upAxis = "Y"
)

def Xform "Root"
{
    reorder nameChildren = ["TestNote", "NoteCollision"]
    def Material "NoteCollision"
    {
        float inputs:WorldClipThreshold = 0 (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-866.9574, 2.505658)
                    float2 sizeInSubgraph = (190, 53)
                    int stackingOrderInSubgraph = 497
                }
            }
        )
        float inputs:ZScale = 1 (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-714.03, 459.52756)
                    float2 sizeInSubgraph = (110.5, 53)
                    int stackingOrderInSubgraph = 514
                }
            }
        )
        token outputs:mtlx:surface.connect = </Root/NoteCollision/PreviewSurface.outputs:out>
        token outputs:realitykit:vertex.connect = </Root/NoteCollision/GeometryModifier.outputs:out>
        string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["outputs:mtlx:surface"]
        float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (287.48328, 101.26898)
        float2 ui:nodegraph:realitykit:subgraphOutputs:size = (181.5, 99)
        int ui:nodegraph:realitykit:subgraphOutputs:stackingOrder = 684

        def Shader "Position"
        {
            uniform token info:id = "ND_position_vector3"
            string inputs:space = "world"
            float3 outputs:out
            float2 ui:nodegraph:node:pos = (-892.1957, 68.82207)
            float2 ui:nodegraph:node:size = (133.5, 40)
            int ui:nodegraph:node:stackingOrder = 497
        }

        def Shader "Separate3"
        {
            uniform token info:id = "ND_separate3_vector3"
            float3 inputs:in.connect = </Root/NoteCollision/Position.outputs:out>
            float outputs:outx
            float outputs:outy
            float outputs:outz
            float2 ui:nodegraph:node:pos = (-655.37823, 113.25566)
            float2 ui:nodegraph:node:size = (115.5, 145)
            int ui:nodegraph:node:stackingOrder = 497
        }

        def Shader "Ifgreater"
        {
            uniform token info:id = "ND_ifgreater_color3"
            color3f inputs:in1 = (0, 0.5898009, 1) (
                colorSpace = "srgb_texture"
            )
            color3f inputs:in2 = (0.999996, 1, 1) (
                colorSpace = "srgb_texture"
            )
            prepend float inputs:value1.connect = </Root/NoteCollision.inputs:WorldClipThreshold>
            prepend float inputs:value2.connect = </Root/NoteCollision/Separate3.outputs:outz>
            color3f outputs:out
            float2 ui:nodegraph:node:pos = (-424.74744, 20.313663)
            float2 ui:nodegraph:node:size = (109, 163)
            int ui:nodegraph:node:stackingOrder = 587
            string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["inputs:in2", "inputs:in2", "inputs:in2", "inputs:value2", "inputs:in1"]
        }

        def Shader "GeometryModifier"
        {
            uniform token info:id = "ND_realitykit_geometrymodifier_vertexshader"
            float3 inputs:bitangent
            color4f inputs:color
            float3 inputs:modelPositionOffset.connect = </Root/NoteCollision/Combine3.outputs:out>
            float3 inputs:normal
            float4 inputs:userAttribute
            half2 inputs:userAttributeHalf2_0
            half2 inputs:userAttributeHalf2_1
            half4 inputs:userAttributeHalf4_0
            half4 inputs:userAttributeHalf4_3
            float2 inputs:uv0
            float2 inputs:uv1
            token outputs:out
            float2 ui:nodegraph:node:pos = (-45.47368, 397.59244)
            float2 ui:nodegraph:node:size = (196.5, 325)
            int ui:nodegraph:node:stackingOrder = 684
            string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["inputs:bitangent"]
        }

        def Shader "Combine3"
        {
            uniform token info:id = "ND_combine3_vector3"
            float inputs:in2
            float inputs:in3.connect = </Root/NoteCollision/Ifgreater_1.outputs:out>
            float3 outputs:out
            float2 ui:nodegraph:node:pos = (-273.88452, 301.99866)
            float2 ui:nodegraph:node:size = (145, 54)
            int ui:nodegraph:node:stackingOrder = 680
        }

        def Shader "Ifgreater_1"
        {
            uniform token info:id = "ND_ifgreater_float"
            float inputs:in1.connect = None
            float inputs:in2.connect = </Root/NoteCollision/Divide.outputs:out>
            float inputs:value1.connect = </Root/NoteCollision/Dot.outputs:out>
            float inputs:value2.connect = </Root/NoteCollision/Separate3.outputs:outz>
            float outputs:out
            float2 ui:nodegraph:node:pos = (-438.23947, 256.86218)
            float2 ui:nodegraph:node:size = (113.5, 163)
            int ui:nodegraph:node:stackingOrder = 585
        }

        def Shader "Subtract"
        {
            uniform token info:id = "ND_subtract_float"
            float inputs:in1.connect = </Root/NoteCollision.inputs:WorldClipThreshold>
            float inputs:in2.connect = </Root/NoteCollision/Separate3.outputs:outz>
            float outputs:out
            float2 ui:nodegraph:node:pos = (-687.29535, 374.97668)
            float2 ui:nodegraph:node:size = (61.5, 36)
            int ui:nodegraph:node:stackingOrder = 583
        }

        def Shader "PreviewSurface"
        {
            uniform token info:id = "ND_UsdPreviewSurface_surfaceshader"
            color3f inputs:diffuseColor.connect = </Root/NoteCollision/Ifgreater.outputs:out>
            token outputs:out
            float2 ui:nodegraph:node:pos = (-37.174606, 37.47848)
            float2 ui:nodegraph:node:size = (148.5, 199)
            int ui:nodegraph:node:stackingOrder = 672
        }

        def Shader "Divide"
        {
            uniform token info:id = "ND_divide_float"
            float inputs:in1.connect = </Root/NoteCollision/Subtract.outputs:out>
            float inputs:in2.connect = </Root/NoteCollision.inputs:ZScale>
            float outputs:out
            float2 ui:nodegraph:node:pos = (-578.45404, 369.2238)
            float2 ui:nodegraph:node:size = (61.5, 36)
            int ui:nodegraph:node:stackingOrder = 512
        }

        def Shader "Dot"
        {
            uniform token info:id = "ND_dot_float"
            float inputs:in.connect = </Root/NoteCollision.inputs:WorldClipThreshold>
            float outputs:out
            float2 ui:nodegraph:node:pos = (-566.0439, 5.3488474)
            float2 ui:nodegraph:node:size = (44, 18)
            int ui:nodegraph:node:stackingOrder = 590
        }
    }

    def Cube "TestNote" (
        active = true
        prepend apiSchemas = ["MaterialBindingAPI"]
    )
    {
        rel material:binding = </Root/NoteCollision> (
            bindMaterialAs = "weakerThanDescendants"
        )
        double size = 0.2
        quatf xformOp:orient = (1, 0, 0, 0)
        float3 xformOp:translate = (-0.033235043, 2.9802322e-8, -0.17053846)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
    }
}

